

#include <ESP8266WiFi.h>

const char* ssid = "wifi-name";           // Chage to wifi name
const char* password = "wifi-password";     // change to wifi password

int ledPin = D5;
int pinState = LOW;

// The certificate is stored in PMEM
static const uint8_t x509[] PROGMEM = {
  0x30, 0x82, 0x01, 0x4b, 0x30, 0x81, 0xf6, 0x02, 0x09, 0x00, 0xf4, 0xc4,
  0x59, 0xc2, 0x53, 0x70, 0x30, 0x6f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
  0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x2d, 0x31,
  0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0e, 0x79, 0x6f,
  0x75, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x68, 0x65, 0x72, 0x65,
  0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x09, 0x31,
  0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x30, 0x1e, 0x17, 0x0d,
  0x31, 0x38, 0x31, 0x30, 0x32, 0x32, 0x31, 0x33, 0x33, 0x37, 0x31, 0x32,
  0x5a, 0x17, 0x0d, 0x33, 0x32, 0x30, 0x36, 0x33, 0x30, 0x31, 0x33, 0x33,
  0x37, 0x31, 0x32, 0x5a, 0x30, 0x2d, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,
  0x55, 0x04, 0x0a, 0x0c, 0x0e, 0x79, 0x6f, 0x75, 0x72, 0x2d, 0x6e, 0x61,
  0x6d, 0x65, 0x2d, 0x68, 0x65, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,
  0x03, 0x55, 0x04, 0x03, 0x0c, 0x09, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e,
  0x30, 0x2e, 0x31, 0x30, 0x5c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
  0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x4b, 0x00, 0x30,
  0x48, 0x02, 0x41, 0x00, 0x9f, 0x67, 0xa4, 0xb6, 0x58, 0x64, 0xc7, 0x1d,
  0x10, 0x66, 0x2c, 0x97, 0xed, 0x24, 0x39, 0x4a, 0xca, 0xd7, 0x93, 0xda,
  0x82, 0x6c, 0x12, 0xdc, 0x8f, 0x99, 0x70, 0x58, 0x6d, 0x94, 0x0f, 0x36,
  0x48, 0x23, 0x9d, 0xca, 0xa1, 0x70, 0xb1, 0xa6, 0xb9, 0x25, 0x4f, 0x4b,
  0x94, 0x98, 0x3f, 0xfd, 0xb9, 0x36, 0xaa, 0x8f, 0x77, 0x73, 0xc2, 0x40,
  0xcc, 0xc7, 0xba, 0x90, 0x15, 0xb9, 0x87, 0x19, 0x02, 0x03, 0x01, 0x00,
  0x01, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
  0x01, 0x0b, 0x05, 0x00, 0x03, 0x41, 0x00, 0xc4, 0x1e, 0xf3, 0xce, 0xe7,
  0xde, 0xcd, 0xaf, 0x97, 0x51, 0xef, 0x43, 0xd8, 0x3d, 0x1e, 0xe9, 0x5d,
  0xc4, 0x6a, 0xf0, 0xd1, 0xbb, 0x54, 0xb9, 0xf4, 0x2c, 0xc0, 0x5d, 0xb3,
  0xc2, 0x69, 0x9a, 0x3e, 0x6e, 0x1e, 0x5e, 0xf6, 0xca, 0xaa, 0xcd, 0x6e,
  0xd9, 0x24, 0x97, 0x56, 0x62, 0xd2, 0x9f, 0x3b, 0x39, 0x59, 0xa1, 0x09,
  0x59, 0xa5, 0xb6, 0x21, 0x89, 0xfe, 0x4a, 0x3f, 0x24, 0x47, 0x7e
};

// And so is the key.  These could also be in DRAM
static const uint8_t rsakey[] PROGMEM = {
  0x30, 0x82, 0x01, 0x3b, 0x02, 0x01, 0x00, 0x02, 0x41, 0x00, 0x9f, 0x67,
  0xa4, 0xb6, 0x58, 0x64, 0xc7, 0x1d, 0x10, 0x66, 0x2c, 0x97, 0xed, 0x24,
  0x39, 0x4a, 0xca, 0xd7, 0x93, 0xda, 0x82, 0x6c, 0x12, 0xdc, 0x8f, 0x99,
  0x70, 0x58, 0x6d, 0x94, 0x0f, 0x36, 0x48, 0x23, 0x9d, 0xca, 0xa1, 0x70,
  0xb1, 0xa6, 0xb9, 0x25, 0x4f, 0x4b, 0x94, 0x98, 0x3f, 0xfd, 0xb9, 0x36,
  0xaa, 0x8f, 0x77, 0x73, 0xc2, 0x40, 0xcc, 0xc7, 0xba, 0x90, 0x15, 0xb9,
  0x87, 0x19, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x40, 0x6b, 0xcc, 0x8b,
  0x77, 0x45, 0x0f, 0xe2, 0x17, 0xa5, 0x9f, 0x73, 0x48, 0xca, 0xf6, 0x54,
  0x48, 0x60, 0x24, 0xa9, 0xb8, 0x7b, 0xba, 0xda, 0x86, 0x8e, 0x16, 0x16,
  0x03, 0xb7, 0x17, 0x09, 0xb1, 0x7a, 0x5b, 0x6e, 0x27, 0x12, 0xe2, 0x4b,
  0xe5, 0x2c, 0xda, 0x36, 0x70, 0x9c, 0x1d, 0xea, 0xd9, 0xe6, 0x8c, 0x53,
  0xea, 0x95, 0x22, 0x0d, 0x70, 0x2e, 0x8c, 0xf0, 0x11, 0x90, 0x5c, 0xd2,
  0x01, 0x02, 0x21, 0x00, 0xd3, 0x04, 0x0b, 0x5a, 0xae, 0x9a, 0xd3, 0xa1,
  0xa7, 0xa1, 0x6e, 0x61, 0x01, 0x04, 0x0c, 0xf8, 0x99, 0x26, 0x20, 0x9c,
  0x50, 0x2c, 0x46, 0x14, 0x75, 0x47, 0x08, 0x8b, 0x3d, 0x2f, 0x17, 0xe5,
  0x02, 0x21, 0x00, 0xc1, 0x62, 0xfd, 0x12, 0xf8, 0x24, 0x3e, 0xd4, 0xde,
  0x22, 0x43, 0xed, 0x3d, 0xea, 0x4b, 0x18, 0x9e, 0x16, 0x7c, 0x53, 0x08,
  0x27, 0x4e, 0xf7, 0xaf, 0xaf, 0xd6, 0x41, 0x78, 0x57, 0x97, 0x25, 0x02,
  0x20, 0x6e, 0x70, 0x63, 0x70, 0xe6, 0x89, 0x69, 0xd1, 0xe5, 0x65, 0xfb,
  0xdb, 0x11, 0x29, 0x09, 0x90, 0xe2, 0xb6, 0xad, 0xc2, 0xa1, 0xc3, 0x4a,
  0x3a, 0x52, 0xd7, 0x06, 0x85, 0xb9, 0x53, 0xf8, 0x71, 0x02, 0x21, 0x00,
  0xbe, 0xe6, 0xef, 0xfa, 0xa4, 0xd8, 0x6a, 0xea, 0x09, 0xea, 0x7b, 0x71,
  0x9c, 0x18, 0x48, 0x4f, 0xa1, 0xe7, 0x82, 0x8d, 0x18, 0xd4, 0x6d, 0x00,
  0xd6, 0xfe, 0xd6, 0x9b, 0xc4, 0xa7, 0x7a, 0xbd, 0x02, 0x21, 0x00, 0xc3,
  0x10, 0xe4, 0xb2, 0x6c, 0xcf, 0x62, 0x0b, 0x06, 0x7a, 0x25, 0x82, 0x3e,
  0x29, 0x10, 0x69, 0xcf, 0x91, 0x73, 0x6d, 0xcb, 0xc4, 0xb8, 0x82, 0xae,
  0xe0, 0x55, 0x97, 0x0b, 0xe5, 0x83, 0xde
};

// Create an instance of the server
// specify the port to listen on as an argument


//WiFiServerSecure server(443); HTTPS
WiFiServer server(80);

 
void setup() {
  Serial.begin(9600);
  delay(10); 
  pinMode(ledPin, OUTPUT);
  
  digitalWrite(ledPin, !pinState);  
}
 
void loop() {
  
  // Connect to WiFi network
  if (WiFi.status() != WL_CONNECTED){
    Serial.println();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);
  
    WiFi.begin(ssid, password);
  
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    // Set the certificates from PMEM (if using DRAM remove the _P from the call)
    
   // server.setServerKeyAndCert_P(rsakey, sizeof(rsakey), x509, sizeof(x509)); HTTPS
  
    Serial.println("");
    Serial.println("WiFi connected");
   
    // Start the server
    server.begin();
    Serial.println("Server started");
   
    // Print the IP address
    Serial.print("Use this URL : ");
    Serial.print("http://");
    Serial.print(WiFi.localIP());
    Serial.println("/");  
  }
  


  
  // Check if a client has connected
  //WiFiClientSecure client = server.available(); HTTPS
  WiFiClient client = server.available(); 
  if (!client) {
    return;
  }
 
  // Wait until the client sends some data
  Serial.println("new client");
  unsigned long timeout = millis() + 1000;
  while (!client.available() && millis() < timeout) {
    delay(1);
  }
  if (millis() > timeout) {
    Serial.println("timeout");
    client.flush();
    client.stop();
    return;
  }
 
  // Read the first line of the request
  String request = client.readStringUntil('\r');
  Serial.println(request);
  client.flush();
 
  // Match the request
 
  
  if (request.indexOf("/LED=ON") != -1) {
    pinState = HIGH;
    digitalWrite(ledPin, !pinState);
  }
  else if (request.indexOf("/LED=OFF") != -1) {
    pinState = LOW;
    digitalWrite(ledPin, !pinState);
  }
  else {
    // same state as befor, to get the status of the pin
  }
 // else {
 //   Serial.println("invalid request");
 //   client.print("HTTP/1.1 404 Not Found\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html><body>Not found</body></html>");
 //   return;


   // Prepare the response
  String s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\nGPIO is now: ";
  s += (pinState) ? "On<br/>Click <a href=\"/LED=OFF\">here</a> Turn relay OFF<br>" : "Off<br/>Click <a href=\"/LED=ON\">here</a> Turn relay ON<br>";
  s += "</html>";


 // Send the response to the client
  client.print(s);



  Serial.println("Client disconnected");
  Serial.println("");
  delay(1);
}
